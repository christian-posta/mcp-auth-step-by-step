#!/bin/bash

# Test script for Step 7: OAuth 2.0 Metadata
echo "üß™ Testing Step 7: OAuth 2.0 Metadata"
echo "====================================="

# Function to cleanup background processes
cleanup() {
    echo "üßπ Cleaning up..."
    if [ ! -z "$SERVER_PID" ]; then
        kill $SERVER_PID 2>/dev/null
        wait $SERVER_PID 2>/dev/null
    fi
    exit 0
}

# Set trap to cleanup on script exit
trap cleanup EXIT INT TERM

# Check if public key exists, if not generate one
if [ ! -f "mcp_public_key.pem" ]; then
    echo "üîë No public key found, generating key pair..."
    uv run python generate_token.py --generate-keys
    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to generate key pair"
        exit 1
    fi
fi

# Generate test token
echo "üîë Generating test token..."
uv run python generate_token.py --username alice --scopes mcp:read,mcp:tools

# Extract token from generated file
ALICE_TOKEN=$(python -c "import json; print(json.load(open('token_alice.json'))['token'])")

if [ -z "$ALICE_TOKEN" ]; then
    echo "‚ùå Failed to extract token"
    exit 1
fi

echo "‚úÖ Test token generated successfully"

# Start the server in background
echo "üöÄ Starting Step 7 server..."
uv run step7 &
SERVER_PID=$!

# Wait for server to start
echo "‚è≥ Waiting for server to start..."
sleep 3

# Test health endpoint
echo "üîç Testing health endpoint..."
HEALTH_RESPONSE=$(curl -s http://localhost:9000/health)

if [ $? -eq 0 ]; then
    echo "‚úÖ Health endpoint test passed!"
    echo "üìÑ Response: $HEALTH_RESPONSE"
    
    # Check if OAuth metadata is included
    if echo "$HEALTH_RESPONSE" | grep -q '"oauth_metadata"'; then
        echo "‚úÖ Health response includes OAuth metadata!"
    else
        echo "‚ùå Health response missing OAuth metadata"
        exit 1
    fi
else
    echo "‚ùå Health endpoint test failed!"
    exit 1
fi

# Test OAuth Protected Resource metadata
echo "üîç Testing OAuth Protected Resource metadata..."
PROTECTED_RESOURCE_RESPONSE=$(curl -s http://localhost:9000/.well-known/oauth-protected-resource)

if [ $? -eq 0 ]; then
    echo "‚úÖ OAuth Protected Resource metadata test passed!"
    echo "üìÑ Response: $PROTECTED_RESOURCE_RESPONSE"
    
    # Check if response contains required fields
    if echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"resource"' && \
       echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"authorization_servers"' && \
       echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"scopes_supported"' && \
       echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"bearer_methods_supported"'; then
        echo "‚úÖ Protected Resource metadata contains all required fields!"
    else
        echo "‚ùå Protected Resource metadata missing required fields"
        exit 1
    fi
    
    # Check if MCP-specific fields are present
    if echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"mcp_protocol_version"' && \
       echo "$PROTECTED_RESOURCE_RESPONSE" | grep -q '"resource_type"'; then
        echo "‚úÖ Protected Resource metadata includes MCP-specific fields!"
    else
        echo "‚ùå Protected Resource metadata missing MCP-specific fields"
        exit 1
    fi
else
    echo "‚ùå OAuth Protected Resource metadata test failed!"
    exit 1
fi

# Test OAuth Authorization Server metadata
echo "üîç Testing OAuth Authorization Server metadata..."
AUTH_SERVER_RESPONSE=$(curl -s http://localhost:9000/.well-known/oauth-authorization-server)

if [ $? -eq 0 ]; then
    echo "‚úÖ OAuth Authorization Server metadata test passed!"
    echo "üìÑ Response: $AUTH_SERVER_RESPONSE"
    
    # Check if response contains required fields
    if echo "$AUTH_SERVER_RESPONSE" | grep -q '"issuer"' && \
       echo "$AUTH_SERVER_RESPONSE" | grep -q '"jwks_uri"' && \
       echo "$AUTH_SERVER_RESPONSE" | grep -q '"scopes_supported"' && \
       echo "$AUTH_SERVER_RESPONSE" | grep -q '"response_types_supported"'; then
        echo "‚úÖ Authorization Server metadata contains all required fields!"
    else
        echo "‚ùå Authorization Server metadata missing required fields"
        exit 1
    fi
    
    # Check if resource indicators are supported
    if echo "$AUTH_SERVER_RESPONSE" | grep -q '"resource_indicators_supported":true'; then
        echo "‚úÖ Authorization Server supports resource indicators!"
    else
        echo "‚ùå Authorization Server missing resource indicators support"
        exit 1
    fi
else
    echo "‚ùå OAuth Authorization Server metadata test failed!"
    exit 1
fi

# Test JWKS endpoint
echo "üîç Testing JWKS endpoint..."
JWKS_RESPONSE=$(curl -s http://localhost:9000/.well-known/jwks.json)

if [ $? -eq 0 ]; then
    echo "‚úÖ JWKS endpoint test passed!"
    echo "üìÑ Response: $JWKS_RESPONSE"
    
    # Check if JWKS contains keys
    if echo "$JWKS_RESPONSE" | grep -q '"keys"'; then
        echo "‚úÖ JWKS contains public key!"
    else
        echo "‚ùå JWKS does not contain keys"
        exit 1
    fi
else
    echo "‚ùå JWKS endpoint test failed!"
    exit 1
fi

# Test authenticated MCP initialize with OAuth metadata
echo "üîç Testing authenticated MCP initialize with OAuth metadata..."
AUTH_INIT_RESPONSE=$(curl -s -X POST http://localhost:9000/mcp \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ALICE_TOKEN" \
  -d '{"jsonrpc": "2.0", "id": 1, "method": "initialize"}')

if [ $? -eq 0 ]; then
    echo "‚úÖ Authenticated initialize test passed!"
    echo "üìÑ Response: $AUTH_INIT_RESPONSE"
    
    # Check if response contains OAuth metadata
    if echo "$AUTH_INIT_RESPONSE" | grep -q '"oauth_metadata"' && \
       echo "$AUTH_INIT_RESPONSE" | grep -q '"protected_resource"' && \
       echo "$AUTH_INIT_RESPONSE" | grep -q '"authorization_server"'; then
        echo "‚úÖ Initialize response includes OAuth metadata!"
    else
        echo "‚ùå Initialize response missing OAuth metadata"
        exit 1
    fi
else
    echo "‚ùå Authenticated initialize test failed!"
    exit 1
fi

# Test authenticated ping with OAuth metadata
echo "üîç Testing authenticated ping with OAuth metadata..."
AUTH_PING_RESPONSE=$(curl -s -X POST http://localhost:9000/mcp \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ALICE_TOKEN" \
  -d '{"jsonrpc": "2.0", "id": 2, "method": "ping"}')

if [ $? -eq 0 ]; then
    echo "‚úÖ Authenticated ping test passed!"
    echo "üìÑ Response: $AUTH_PING_RESPONSE"
    
    # Check if response contains OAuth metadata flag
    if echo "$AUTH_PING_RESPONSE" | grep -q '"oauth_metadata_available":true'; then
        echo "‚úÖ Ping response indicates OAuth metadata availability!"
    else
        echo "‚ùå Ping response missing OAuth metadata flag"
        exit 1
    fi
else
    echo "‚ùå Authenticated ping test failed!"
    exit 1
fi

# Test authenticated tools/list (should still work)
echo "üîç Testing authenticated tools/list..."
AUTH_TOOLS_RESPONSE=$(curl -s -X POST http://localhost:9000/mcp \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ALICE_TOKEN" \
  -d '{"jsonrpc": "2.0", "id": 3, "method": "tools/list"}')

if [ $? -eq 0 ]; then
    echo "‚úÖ Authenticated tools/list test passed!"
    echo "üìÑ Response: $AUTH_TOOLS_RESPONSE"
    
    # Check if response contains tools
    if echo "$AUTH_TOOLS_RESPONSE" | grep -q '"name":"echo"'; then
        echo "‚úÖ Echo tool is listed correctly!"
    else
        echo "‚ùå Echo tool not found in response!"
        exit 1
    fi
else
    echo "‚ùå Authenticated tools/list test failed!"
    exit 1
fi

# Test authenticated tools/call (should still work)
echo "üîç Testing authenticated tools/call..."
AUTH_CALL_RESPONSE=$(curl -s -X POST http://localhost:9000/mcp \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $ALICE_TOKEN" \
  -d '{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "echo", "arguments": {"message": "Hello OAuth", "repeat_count": 2}}}')

if [ $? -eq 0 ]; then
    echo "‚úÖ Authenticated tools/call test passed!"
    echo "üìÑ Response: $AUTH_CALL_RESPONSE"
    
    # Check if response contains the echoed message
    if echo "$AUTH_CALL_RESPONSE" | grep -q 'Hello OAuthHello OAuth'; then
        echo "‚úÖ Echo tool works correctly!"
    else
        echo "‚ùå Echo tool response is incorrect!"
        exit 1
    fi
else
    echo "‚ùå Authenticated tools/call test failed!"
    exit 1
fi

# Test unauthenticated request (should still fail)
echo "üîç Testing unauthenticated request..."
UNAUTH_RESPONSE=$(curl -s -X POST http://localhost:9000/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc": "2.0", "id": 5, "method": "initialize"}')

if [ $? -eq 0 ]; then
    echo "‚úÖ Unauthenticated request test passed!"
    echo "üìÑ Response: $UNAUTH_RESPONSE"
    
    # Check if response contains 401 error
    if echo "$UNAUTH_RESPONSE" | grep -q '"detail":"Authorization header missing"'; then
        echo "‚úÖ Properly rejects unauthenticated requests!"
    else
        echo "‚ùå Did not properly reject unauthenticated request"
        exit 1
    fi
else
    echo "‚ùå Unauthenticated request test failed!"
    exit 1
fi

echo ""
echo "üéâ Step 7 tests completed successfully!"
echo "‚úÖ OAuth 2.0 Protected Resource metadata is working"
echo "‚úÖ OAuth 2.0 Authorization Server metadata is working"
echo "‚úÖ JWKS endpoint continues to work"
echo "‚úÖ All existing MCP functionality still works"
echo "‚úÖ OAuth metadata is included in MCP responses"
echo "‚úÖ Resource indicators are supported"
echo "‚úÖ Authentication enforcement continues to work"
echo "‚úÖ Ready for next step: Scope-based authorization" 